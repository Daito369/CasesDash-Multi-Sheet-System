/**
 * DATABASE CONNECTION TEST SCRIPT
 * „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàÈÄ£Êê∫„ÅÆÁ∑äÊÄ•‰øÆÊ≠£„ÉÜ„Çπ„Éà
 * 
 * „Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØ„ÄÅÊñ∞„Åó„ÅèËøΩÂä†„Åï„Çå„ÅüÈñ¢Êï∞„Çí„ÉÜ„Çπ„Éà„Åó„ÄÅ
 * „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„ÅÆÂïèÈ°å„ÇíË®∫Êñ≠„Éª‰øÆÊ≠£„Åó„Åæ„Åô„ÄÇ
 * 
 * @author Roo
 * @version 1.0
 * @since 2025-05-28
 */

/**
 * „É°„Ç§„É≥„ÉÜ„Çπ„ÉàÂÆüË°åÈñ¢Êï∞
 * ÂÖ®„Å¶„ÅÆ‰øÆÊ≠£„Åï„Çå„ÅüÊ©üËÉΩ„Çí„ÉÜ„Çπ„Éà„Åó„Åæ„Åô
 */
function runDatabaseConnectionTests() {
  console.log('üö® DATABASE CONNECTION TEST - Á∑äÊÄ•‰øÆÊ≠£Ê§úË®ºÈñãÂßã');
  console.log('=====================================');
  
  const testResults = {
    timestamp: new Date().toISOString(),
    tests: {},
    summary: {
      total: 0,
      passed: 0,
      failed: 0,
      errors: []
    }
  };
  
  // Test 1: getActiveCasesÈñ¢Êï∞„ÉÜ„Çπ„Éà
  console.log('üìã Test 1: getActiveCasesÈñ¢Êï∞„ÉÜ„Çπ„Éà');
  try {
    const activeCasesResult = getActiveCases();
    testResults.tests.getActiveCases = {
      success: activeCasesResult.success,
      dataCount: activeCasesResult.data ? activeCasesResult.data.length : 0,
      result: activeCasesResult,
      status: activeCasesResult.success ? 'PASS' : 'FAIL'
    };
    
    if (activeCasesResult.success) {
      console.log(`‚úÖ getActiveCases: ${activeCasesResult.data.length}‰ª∂„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç±„Éº„Çπ„ÇíÂèñÂæó`);
      testResults.summary.passed++;
    } else {
      console.log(`‚ùå getActiveCases: Â§±Êïó - ${activeCasesResult.error}`);
      testResults.summary.failed++;
      testResults.summary.errors.push(`getActiveCases: ${activeCasesResult.error}`);
    }
  } catch (error) {
    console.log(`‚ùå getActiveCases: „Ç®„É©„Éº - ${error.message}`);
    testResults.tests.getActiveCases = {
      success: false,
      error: error.message,
      status: 'ERROR'
    };
    testResults.summary.failed++;
    testResults.summary.errors.push(`getActiveCases: ${error.message}`);
  }
  testResults.summary.total++;
  
  // Test 2: testDatabaseConnectionÈñ¢Êï∞„ÉÜ„Çπ„Éà
  console.log('\nüîó Test 2: testDatabaseConnectionÈñ¢Êï∞„ÉÜ„Çπ„Éà');
  try {
    const dbConnectionResult = testDatabaseConnection();
    testResults.tests.testDatabaseConnection = {
      success: dbConnectionResult.success,
      spreadsheetInfo: dbConnectionResult.spreadsheetInfo,
      validation: dbConnectionResult.validation,
      result: dbConnectionResult,
      status: dbConnectionResult.success ? 'PASS' : 'FAIL'
    };
    
    if (dbConnectionResult.success) {
      console.log(`‚úÖ testDatabaseConnection: „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàÊé•Á∂öÊàêÂäü`);
      console.log(`   üìä „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„Éà: ${dbConnectionResult.spreadsheetInfo?.name}`);
      console.log(`   üìã „Ç∑„Éº„ÉàÊï∞: ${dbConnectionResult.spreadsheetInfo?.totalSheets}`);
      testResults.summary.passed++;
    } else {
      console.log(`‚ùå testDatabaseConnection: Â§±Êïó - ${dbConnectionResult.error}`);
      if (dbConnectionResult.validation?.missingSheets?.length > 0) {
        console.log(`   üìù Ê¨†Êêç„Ç∑„Éº„Éà: ${dbConnectionResult.validation.missingSheets.join(', ')}`);
      }
      testResults.summary.failed++;
      testResults.summary.errors.push(`testDatabaseConnection: ${dbConnectionResult.error}`);
    }
  } catch (error) {
    console.log(`‚ùå testDatabaseConnection: „Ç®„É©„Éº - ${error.message}`);
    testResults.tests.testDatabaseConnection = {
      success: false,
      error: error.message,
      status: 'ERROR'
    };
    testResults.summary.failed++;
    testResults.summary.errors.push(`testDatabaseConnection: ${error.message}`);
  }
  testResults.summary.total++;
  
  // Test 3: updateCaseExclusionÈñ¢Êï∞„ÉÜ„Çπ„ÉàÔºà„Çµ„É≥„Éó„É´„Ç±„Éº„Çπ‰ΩøÁî®Ôºâ
  console.log('\nüîÑ Test 3: updateCaseExclusionÈñ¢Êï∞„ÉÜ„Çπ„Éà');
  try {
    // „Åæ„Åö„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç±„Éº„Çπ„ÇíÂèñÂæó„Åó„Å¶„ÉÜ„Çπ„ÉàÂØæË±°„ÇíÁâπÂÆö
    const activeCases = getActiveCases();
    if (activeCases.success && activeCases.data.length > 0) {
      const testCase = activeCases.data[0];
      const updateResult = updateCaseExclusion(testCase.caseId, 'excludeFromP95', false);
      
      testResults.tests.updateCaseExclusion = {
        success: updateResult.success,
        testCaseId: testCase.caseId,
        result: updateResult,
        status: updateResult.success ? 'PASS' : 'FAIL'
      };
      
      if (updateResult.success) {
        console.log(`‚úÖ updateCaseExclusion: „Ç±„Éº„Çπ ${testCase.caseId} „ÅÆÈô§Â§ñË®≠ÂÆöÊõ¥Êñ∞ÊàêÂäü`);
        testResults.summary.passed++;
      } else {
        console.log(`‚ùå updateCaseExclusion: Â§±Êïó - ${updateResult.error}`);
        testResults.summary.failed++;
        testResults.summary.errors.push(`updateCaseExclusion: ${updateResult.error}`);
      }
    } else {
      console.log('‚ö†Ô∏è updateCaseExclusion: „ÉÜ„Çπ„ÉàÁî®„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç±„Éº„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
      testResults.tests.updateCaseExclusion = {
        success: false,
        error: 'No active cases available for testing',
        status: 'SKIP'
      };
    }
  } catch (error) {
    console.log(`‚ùå updateCaseExclusion: „Ç®„É©„Éº - ${error.message}`);
    testResults.tests.updateCaseExclusion = {
      success: false,
      error: error.message,
      status: 'ERROR'
    };
    testResults.summary.failed++;
    testResults.summary.errors.push(`updateCaseExclusion: ${error.message}`);
  }
  testResults.summary.total++;
  
  // Test 4: „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàË®≠ÂÆöÁ¢∫Ë™ç
  console.log('\n‚öôÔ∏è Test 4: „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàË®≠ÂÆöÁ¢∫Ë™ç');
  try {
    const spreadsheetId = ConfigManager.getSpreadsheetId();
    const availableSheetTypes = SheetMapper.getAvailableSheetTypes();
    
    testResults.tests.configuration = {
      spreadsheetId: spreadsheetId,
      availableSheetTypes: availableSheetTypes,
      hasSpreadsheetId: !!spreadsheetId,
      sheetTypeCount: availableSheetTypes.length,
      status: spreadsheetId ? 'PASS' : 'FAIL'
    };
    
    if (spreadsheetId) {
      console.log(`‚úÖ Ë®≠ÂÆöÁ¢∫Ë™ç: „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàIDË®≠ÂÆöÊ∏à„Åø`);
      console.log(`   üìä ID: ${spreadsheetId}`);
      console.log(`   üìã Âà©Áî®ÂèØËÉΩ„Ç∑„Éº„Éà„Çø„Ç§„Éó: ${availableSheetTypes.length}ÂÄã`);
      testResults.summary.passed++;
    } else {
      console.log(`‚ùå Ë®≠ÂÆöÁ¢∫Ë™ç: „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàID„ÅåÊú™Ë®≠ÂÆö`);
      testResults.summary.failed++;
      testResults.summary.errors.push('Spreadsheet ID not configured');
    }
  } catch (error) {
    console.log(`‚ùå Ë®≠ÂÆöÁ¢∫Ë™ç: „Ç®„É©„Éº - ${error.message}`);
    testResults.tests.configuration = {
      success: false,
      error: error.message,
      status: 'ERROR'
    };
    testResults.summary.failed++;
    testResults.summary.errors.push(`Configuration: ${error.message}`);
  }
  testResults.summary.total++;
  
  // ÊúÄÁµÇÁµêÊûú„Çµ„Éû„É™„Éº
  console.log('\nüìä „ÉÜ„Çπ„ÉàÁµêÊûú„Çµ„Éû„É™„Éº');
  console.log('=====================================');
  console.log(`‚úÖ ÊàêÂäü: ${testResults.summary.passed}/${testResults.summary.total}`);
  console.log(`‚ùå Â§±Êïó: ${testResults.summary.failed}/${testResults.summary.total}`);
  
  if (testResults.summary.errors.length > 0) {
    console.log('\nüö® „Ç®„É©„ÉºË©≥Á¥∞:');
    testResults.summary.errors.forEach((error, index) => {
      console.log(`${index + 1}. ${error}`);
    });
  }
  
  const successRate = Math.round((testResults.summary.passed / testResults.summary.total) * 100);
  console.log(`\nüéØ ÊàêÂäüÁéá: ${successRate}%`);
  
  if (successRate >= 75) {
    console.log('üéâ „Éá„Éº„Çø„Éô„Éº„ÇπÈÄ£Êê∫‰øÆÊ≠£„ÅåÊàêÂäü„Åó„Åæ„Åó„ÅüÔºÅ');
  } else {
    console.log('‚ö†Ô∏è ËøΩÂä†„ÅÆ‰øÆÊ≠£„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ„Ç®„É©„ÉºË©≥Á¥∞„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
  }
  
  return testResults;
}

/**
 * ÂÄãÂà•Èñ¢Êï∞„ÉÜ„Çπ„Éà: getActiveCases
 */
function testGetActiveCases() {
  console.log('üß™ Testing getActiveCases function...');
  
  try {
    const result = getActiveCases();
    console.log('Result:', JSON.stringify(result, null, 2));
    
    if (result.success) {
      console.log(`‚úÖ Success: Found ${result.data.length} active cases`);
      
      if (result.data.length > 0) {
        console.log('üìã Sample case:', result.data[0]);
      }
    } else {
      console.log(`‚ùå Failed: ${result.error}`);
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * ÂÄãÂà•Èñ¢Êï∞„ÉÜ„Çπ„Éà: testDatabaseConnection
 */
function testDatabaseConnectionFunction() {
  console.log('üß™ Testing testDatabaseConnection function...');
  
  try {
    const result = testDatabaseConnection();
    console.log('Result:', JSON.stringify(result, null, 2));
    
    if (result.success) {
      console.log('‚úÖ Database connection successful');
    } else {
      console.log(`‚ùå Database connection failed: ${result.error}`);
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * ÂÄãÂà•Èñ¢Êï∞„ÉÜ„Çπ„Éà: updateCaseExclusion
 */
function testUpdateCaseExclusion(caseId = null, exclusionType = 'excludeFromP95', isEnabled = false) {
  console.log('üß™ Testing updateCaseExclusion function...');
  
  if (!caseId) {
    // „Çµ„É≥„Éó„É´„Ç±„Éº„ÇπID„ÇíÂèñÂæó
    try {
      const activeCases = getActiveCases();
      if (activeCases.success && activeCases.data.length > 0) {
        caseId = activeCases.data[0].caseId;
        console.log(`Using sample case ID: ${caseId}`);
      } else {
        console.log('‚ùå No active cases available for testing');
        return { success: false, error: 'No test case available' };
      }
    } catch (error) {
      console.log('‚ùå Failed to get test case:', error.message);
      return { success: false, error: error.message };
    }
  }
  
  try {
    const result = updateCaseExclusion(caseId, exclusionType, isEnabled);
    console.log('Result:', JSON.stringify(result, null, 2));
    
    if (result.success) {
      console.log(`‚úÖ Successfully updated exclusion setting for case ${caseId}`);
    } else {
      console.log(`‚ùå Failed to update exclusion setting: ${result.error}`);
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * „Éá„É¢„É¢„Éº„ÉâËß£Èô§Á¢∫Ë™ç„ÉÜ„Çπ„Éà
 */
function testDemoModeResolution() {
  console.log('üé≠ Testing demo mode resolution...');
  
  try {
    // 1. „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàË®≠ÂÆöÁ¢∫Ë™ç
    const spreadsheetId = ConfigManager.getSpreadsheetId();
    console.log(`Spreadsheet ID: ${spreadsheetId || 'NOT SET'}`);
    
    // 2. „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„ÉÜ„Çπ„Éà
    const dbTest = testDatabaseConnection();
    console.log(`Database connection: ${dbTest.success ? 'SUCCESS' : 'FAILED'}`);
    
    // 3. „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç±„Éº„ÇπÂèñÂæó„ÉÜ„Çπ„Éà
    const activeCases = getActiveCases();
    console.log(`Active cases retrieval: ${activeCases.success ? 'SUCCESS' : 'FAILED'}`);
    console.log(`Active cases count: ${activeCases.data ? activeCases.data.length : 0}`);
    
    // 4. „Éá„É¢„É¢„Éº„ÉâÂà§ÂÆö
    const isDemoMode = !spreadsheetId || !dbTest.success || !activeCases.success;
    
    console.log('\nüìä Demo Mode Status Analysis:');
    console.log(`- Spreadsheet configured: ${!!spreadsheetId}`);
    console.log(`- Database accessible: ${dbTest.success}`);
    console.log(`- Can retrieve cases: ${activeCases.success}`);
    console.log(`- Demo mode active: ${isDemoMode}`);
    
    if (!isDemoMode) {
      console.log('üéâ Demo mode successfully resolved!');
    } else {
      console.log('‚ö†Ô∏è Demo mode still active. Check the issues above.');
    }
    
    return {
      success: !isDemoMode,
      demoMode: isDemoMode,
      details: {
        spreadsheetConfigured: !!spreadsheetId,
        databaseAccessible: dbTest.success,
        canRetrieveCases: activeCases.success
      }
    };
    
  } catch (error) {
    console.error('‚ùå Error testing demo mode resolution:', error.message);
    return { success: false, error: error.message };
  }
}

console.log('üöÄ Database Connection Test Script Loaded');
console.log('üìù Available test functions:');
console.log('  ‚Ä¢ runDatabaseConnectionTests() - ÂÖ®‰Ωì„ÉÜ„Çπ„ÉàÂÆüË°å');
console.log('  ‚Ä¢ testGetActiveCases() - getActiveCasesÈñ¢Êï∞„ÉÜ„Çπ„Éà');
console.log('  ‚Ä¢ testDatabaseConnectionFunction() - testDatabaseConnectionÈñ¢Êï∞„ÉÜ„Çπ„Éà');
console.log('  ‚Ä¢ testUpdateCaseExclusion() - updateCaseExclusionÈñ¢Êï∞„ÉÜ„Çπ„Éà');
console.log('  ‚Ä¢ testDemoModeResolution() - „Éá„É¢„É¢„Éº„ÉâËß£Èô§Á¢∫Ë™ç');